#!/usr/bin/env perl

use strict;
use warnings;
use Fcntl qw(SEEK_SET SEEK_CUR SEEK_END); # for indexed sequence random file access
use vars qw(%codon2aa %subs $db_file %template_sequences %template_sequence_N_regions $min_interferring_N_stretch $sequence_fasta_filehandle %sequence_fasta_offsets %sequence_length);

# Homo sapiens codon table
%codon2aa = (
                TTT => "F", TCT => "S", TAT => "Y", TGT => "C",
                TTC => "F", TCC => "S", TAC => "Y", TGC => "C",
                TTA => "L", TCA => "S", TAA => "*", TGA => "*",
                TTG => "L", TCG => "S", TAG => "*", TGG => "W",

                CTT => "L", CCT => "P", CAT => "H", CGT => "R",
                CTC => "L", CCC => "P", CAC => "H", CGC => "R",
                CTA => "L", CCA => "P", CAA => "Q", CGA => "R",
                CTG => "L", CCG => "P", CAG => "Q", CGG => "R",

                ATT => "I", ACT => "T", AAT => "N", AGT => "S",
                ATC => "I", ACC => "T", AAC => "N", AGC => "S",
                ATA => "I", ACA => "T", AAA => "K", AGA => "R",
                ATG => "M", ACG => "T", AAG => "K", AGG => "R",

                GTT => "V", GCT => "A", GAT => "D", GGT => "G",
                GTC => "V", GCC => "A", GAC => "D", GGC => "G",
                GTA => "V", GCA => "A", GAA => "E", GGA => "G",
                GTG => "V", GCG => "A", GAG => "E", GGG => "G");

%subs = (
                A => "RWMDHV",
                C => "YSMBHV",
                G => "RSKBDV",
                T => "YWKBDH",
                R => "AG",
                Y => "CT",
                S => "CG",
                W => "AT",
                K => "GT",
                M => "AC",
                B => "CGT",
                D => "AGT",
                H => "ACT",
                V => "ACG",
                N => "ACGTRYSWKMBDHV",
		"-" , "-"
                );

@ARGV == 3 or @ARGV == 5 or die "Usage: $0 <templates.fasta> <exclude template id.txt> <probes_and_or_primers.fasta> [alignment_output.html mismatch_histogram_data_output.txt]\n";
$db_file = shift @ARGV;
my $excludes_file = shift @ARGV;
my $query_file = shift @ARGV;
my $html_output = @ARGV ? shift @ARGV : undef;
my $histogram_filename = @ARGV ? shift @ARGV : undef;

if(not (-e "$db_file.nsq" || -e "$db_file.00.nsq")){ # non-existent BLAST index for the FastA file of templates
	warn "Creating new BLAST database\n";
	system("makeblastdb -in $db_file -dbtype nucl 1>&2") >> 8 
	  and die "Cannot run makeblastdb, return code $?\n";
}

if(not -e "$db_file.fai"){  # No FastA index for samtools faidx retrieval later as used by mismatch alignment output
	warn "Creating new samtools FastA index\n";
	system("samtools faidx $db_file 1>&2") >> 8
          and die "Cannot run samtools faidx, return code $?\n";
}

# List of template sequence identifiers to exclude from the mismatch analysis due to duplication, poor quality, etc.
open(EXCLUDES, $excludes_file)
  or die "Cannot open excluded IDs file $excludes_file for reading: $!\n";
my %exclude;
while(<EXCLUDES>){
	next if /^\s*#/;
	if(/^(\S+)/){
		$exclude{$1} = 1;
	}
}
close(EXCLUDES);

# Track all of the relevant templates and queries as we will need this data later for extending the alignments and calculating ambiguity matches
my $aa_queries_detected = 0;
$/ = "\n>"; # FastA record separator
open(QUERIES, $query_file)
  or die "Cannot open $query_file for reading: $!\n";
my %query_sequences;
my $shortest_query_len = 10000000;
while(<QUERIES>){
	my ($query_name, $query_sequence) = /^>?(\S+).*?\n(.*)/;
	$query_sequence =~ tr/ \t\r\n//d;

	if(not $aa_queries_detected and $query_sequence !~ /^[ACGTSWRYKMBDHVNX ]+$/){
		warn "Amino acid queries detected, running AA mode\n";
		$aa_queries_detected = 1;
	}
	$query_sequences{$query_name} = $query_sequence;
	if(length($query_sequence) < $shortest_query_len){
		$shortest_query_len = length($query_sequence);
	}
}
close(QUERIES);
my $num_queries = scalar(keys %query_sequences);

# 4 is the smallest word sizes supported by BLAST 2.9.0+, for maximum sensitivity
my $blastn_word_size = 4;
my $tblastn_word_size = 2;
$min_interferring_N_stretch = $shortest_query_len - 2*$blastn_word_size;
# For epitope drift we are looking at closely related sequences so for best match stats use a scoring matrix more suited to short matches with random point mutations.
# In an ideal world we would use an even more strict matrix like VTML10, but this would require switching to another BLAST implementation like wu-blast (TODO).
# For now, don't put too much stock in the e-values generated.
my $tblastn_substitution_matrix = "PAM30";
my $num_threads = 20;

# Each retrieval from samtools faidx takes several seconds, which can really add up when thousands of matches are present, so 
# let's just keep the index loaded and the sequence file open internally so we can skip all that overhead of multiple system()/open() 
# samtools calls or reading the output twice.
$/ = "\n";
open($sequence_fasta_filehandle, $db_file)
  or die "Cannot open $db_file for reading: $!\n";
open(FAIDX, "$db_file.fai")
  or die "Cannot open $db_file.fai for reading: $!\n";
while(<FAIDX>){
	chomp;
	my ($name, $length, $seq_start_offset, $bases_per_line, $chars_per_line) = split /\t/, $_;
 	$sequence_fasta_offsets{$name} = $seq_start_offset;
 	$sequence_length{$name} = $length;
}
close(FAIDX);

my $num_templates = scalar(keys %sequence_fasta_offsets);
if($aa_queries_detected){
	# So I tried lowering the xdrop_gap_final score from the default of 25 for better end alignments but in practice it makes weirder / more missing alignments for short epitopes
	# max_hsp 1 means keep only the best hit for every query-subject pair.
	open(BLAST, "tblastn -max_hsps 1 -num_threads $num_threads -num_descriptions $num_templates -num_alignments $num_templates -word_size $tblastn_word_size -matrix $tblastn_substitution_matrix -db $db_file -query $query_file -seg no -soft_masking false -evalue 1000 |")
	  or die "Cannot run tblastn: $!\n";
}
else{
	open(BLAST, "blastn -num_threads $num_threads -num_alignments $num_templates -word_size $blastn_word_size -db $db_file -query $query_file -dust no -soft_masking false -evalue 1000 |")
	  or die "Cannot run blastn: $!\n";
}

# Most things are working so far, let's open the HTML output file if it was specified
if(defined $html_output){
	open(STDOUT, ">$html_output")
	  or die "Cannot open $html_output for writing: $!\n";
}

$/ = "\nQuery="; # BLAST query output separator
my %mismatch_alignments;
my %perfect_match_alignment;
my %query_lengths;
my %extended_alignment;
my %query2mismatch_cardinality;
while(<BLAST>){
	if(not /(?:Query=)?\s*(\S+)\s+Length=(\d+)/s){
		next; # prologue
	}
	my ($query_name, $query_length) = ($1, $2);

	# Sanity check of earlier sequence parsing
	if(not exists $query_sequences{$query_name}){
		die "Discrepancy between query lists when parsed by this script and NCBI BLAST, please check FastA formatting of entry '$query_name'\n";
	}
	if($query_length != length($query_sequences{$query_name})){
		die "Discrepancy between length of query when parsed by this script (", length($query_sequences{$query_name}), ") and NCBI BLAST ($query_length), please check FastA formatting of entry '$query_name'\n$_";
	}
	$query_lengths{$query_name} = $query_length;
	my @hits = split /\n>/s, $_;
	shift @hits; # alignment summary header

	while(@hits){
		my $hit = shift @hits;
		my ($subject_name, $alignments) = $hit =~ /^\s*(\S+).*?\nLength=\d+\s+(.*)/s;
		if(not defined $subject_name){
			warn "Could not parse subject name from $hit\n";
			next;
		}
		if($hit !~ /Strand=|Frame = \+/s){
			# warn "Skipping negative strand best AA match for $subject_name against $query_name\n";
			next;
		}
		next if exists $exclude{$subject_name};
		my ($identities) = $hit =~ /Identities = (\d+)/s;
		if($hit =~ /Identities = \d+\/(\d+) \(100%/s and $1 == $query_length and $hit =~ /Gaps = 0/){
			$perfect_match_alignment{$subject_name}->{$query_name} = 1;
			next; # perfect match, no need to record
		}

		# Discount mismatches if they match a suitable IUPAC ambiguity code.
		my ($qstart, $qpad, $qaln, $qend, $aln, $sstart, $spad, $saln, $send) = $hit =~ /Query\s+(\d+)(\s+)(\S+)\s+(\d+)\s+?([^ ][^\n]+)\s+?Sbjct\s+(\d+)(\s+)(\S+)\s+(\d+)/s;
		my $pad = " " x length($qstart.$qpad);

		my $subject_scaling = 1;
		# Retrieve the ambiguous codons underlying the alignment so we can determine "real" mismatch vs BLAST unsophisticated translation.
		if($aa_queries_detected){
			$subject_scaling = 3;
			$saln = substr(&template_sequence($subject_name), $sstart-1, $send-$sstart+1);
			$saln =~ tr/U/T/; # RNA -> DNA for simplicity of downstream processing
		}

		# If the match is a substring of the query, extend the alignment in both the query and subject so the user sees the terminal mismatches.
		# Use lower case letters to indicate that we added these bits.
		my $num_missing_5p_bases = $subject_scaling*($qstart-1);
		my $five_prime_subject = lc(substr(&template_sequence($subject_name), $sstart-$num_missing_5p_bases-1, $num_missing_5p_bases));
		my $num_missing_3p_bases = $subject_scaling*($query_length-$qend);
		my $three_prime_subject = lc(substr(&template_sequence($subject_name), $send, $num_missing_3p_bases));
		my $five_prime_query = lc(substr($query_sequences{$query_name}, 0, $qstart-1));
		my $three_prime_query = $qend == $query_length ? "" : lc(substr($query_sequences{$query_name}, $qend));
		if($qend != $query_length || $qstart > 1){
			$extended_alignment{$subject_name} //= 1;
		}
                if(&valid_iupac_substitution($five_prime_query, $five_prime_subject, $aa_queries_detected) and 
                   &valid_iupac_substitution($three_prime_query, $three_prime_subject, $aa_queries_detected) and 
		   &valid_iupac_substitution($qaln, $saln, $aa_queries_detected)){
			# ignore as perfect match since truncated alignment is only due to ambiguous bases in the template
			$perfect_match_alignment{$subject_name}->{$query_name} = 1;
			next;
		}
		if($aa_queries_detected){ # account for AA representation of query extension but DNA representation of subject
			if($qstart > 1){
				$five_prime_query = " ".join("  ", split(//, $five_prime_query))." ";
			}
			$three_prime_query = " ".join("  ", split(//, $three_prime_query))." ";
			$qaln = " ".join("  ", split(//, $qaln))." ";
			$aln = " ".join("  ", split(//, $aln))." ";
		}
		$saln = $five_prime_subject.$saln.$three_prime_subject;
		$qaln = $five_prime_query.$qaln.$three_prime_query;
		my $of_note = " " x length($saln);
		$aln = (" " x (length($five_prime_query)+length($five_prime_subject))).$aln.(" " x (length($three_prime_query)+length($three_prime_subject)));
		#$aln = (" " x length($five_prime_subject)).$aln.(" " x length($three_prime_subject));
		# Fix the alignment symbols to account for the ambiguity mismatches and the extensions.
		my $new_aln = " " x length($saln);
		my $num_mismatches = 0;
		for(my $i = 0; $i < length($new_aln); $i+=$subject_scaling){
			if($aa_queries_detected){
				my $codon = uc(substr($saln, $i, 3));
				my $qaa = uc(substr($qaln, $i+1, 1));
				# Normal match
				if($qaa eq "X" or $codon eq "NNN" or defined $codon2aa{$codon}){
					# Special case if X is matching a stop codon, report the stop codon instead to indicate possible in/del error upstream.
					if(defined $codon2aa{$codon}){
						if($codon2aa{$codon} eq "*"){
							substr($of_note, $i, 3) = "TER";
							$num_mismatches++;
						}
						elsif($codon2aa{$codon} ne $qaa){
							substr($of_note, $i, 3) = " ".$codon2aa{$codon}." "; # Note mismatch
							if($qaa ne "X"){
								$num_mismatches++;
							}
						}
						else{ # a match
							substr($new_aln, $i+1, 1) = $codon2aa{$codon};
							next;
						}
					}
					# Show conservative substitutions if any exist, like TBLASTN does, otherwise it's a blank for the TBLASTN mismatch at this residue.
					substr($new_aln, $i+1, 1) = substr($aln, $i+1, 1); 
				}
				else{
					my %disambiguated_aas;
					my $disambiguated_matching_codon;
                       			for my $b1 (split //, $subs{substr($codon, 0, 1)}){
                                		next unless $b1 =~ /[ACGT]/;
                                		for my $b2 (split //, $subs{substr($codon, 1, 1)}){
                                        		next unless $b2 =~ /[ACGT]/;
                                        		for my $b3 (split //, $subs{substr($codon, 2, 1)}){
                                                		next unless $b3 =~ /[ACGT]/;
								my $aa = $codon2aa{$b1.$b2.$b3};
								$disambiguated_aas{$aa}++;
                                                		if($aa eq $qaa){
									$disambiguated_matching_codon = $b1.$b2.$b3;
									last;
								}
                                       	 		}
							last if defined $disambiguated_matching_codon;
                                		}
						last if defined $disambiguated_matching_codon;
                       			}
					if(defined $disambiguated_matching_codon){
						substr($of_note, $i, 3) = $disambiguated_matching_codon;
					}
					else{ # Mismatch
						$num_mismatches++;
						substr($new_aln, $i, 3) = substr($aln, $i, 3); # copy existing alignment symbol
						my @disambiguated_aas = keys %disambiguated_aas;
						my $miss = defined $codon2aa{$codon} ? $codon2aa{$codon} : (scalar(@disambiguated_aas) == 1 ? $disambiguated_aas[0] : " "); # blank if ambig codon doesn't resolve to a match or single codon
						if($miss eq "*"){
							substr($of_note, $i, 3) = "TER";
						}
						else{
							substr($of_note, $i+1, 1) = $miss;
						}
					}
				}
			}
			else{ # DNA
				my $qbase = uc(substr($qaln, $i, 1));
				my $sbase = uc(substr($saln, $i, 1));
				if($qbase eq $sbase){
					substr($new_aln, $i, 1) = "|";
				}
				else{
					substr($new_aln, $i, 1) = substr($aln, $i, 1);
					my $match_found = 0;
					if(not exists $subs{$qbase}){warn "Skipping sub options for unknown base '$qbase'\n"; next;}
					for my $subject_base_option (split //, $subs{$qbase}){
						if($subject_base_option eq $sbase){
							substr($of_note, $i, 1) = ":";
							$match_found = 1;
							last;
						}
					}
					$num_mismatches++ unless $match_found;
				}
			}
		}
		$query2mismatch_cardinality{$query_name} = $num_mismatches;
		next unless $num_mismatches;
		$aln =~ s/^(\s+)/$1.(" " x ($subject_scaling*($qstart-1)))/e;
		$mismatch_alignments{$subject_name} //= {};
		$mismatch_alignments{$subject_name}->{$query_name} = "mismatches: $num_mismatches/$query_length\n$qstart$qpad$qaln $qend/".
								     ($qend+$num_missing_3p_bases/$subject_scaling).
					                             "\n$pad$new_aln\n$sstart$spad$saln $send/".
								     ($send+$num_missing_3p_bases/$subject_scaling)."\n$pad$of_note\n";
	}
	
}
close(BLAST);

# If an epitope search, print the histogram data of mismatches to a file that can be loaded into text2ui reports
if(scalar(keys %sequence_fasta_offsets) == 1 and defined $histogram_filename){
	open(HISTOGRAM, ">$histogram_filename")
	  or die "Cannot open $histogram_filename for writing: $!\n";
	print HISTOGRAM "#Total queries: $num_queries\n";
	my %mismatch_cardinality2query_count;
	for my $queryname (keys %query2mismatch_cardinality){
		$mismatch_cardinality2query_count{$query2mismatch_cardinality{$queryname}}++;
	}
	for my $mismatch_count (sort {$a <=> $b} keys %mismatch_cardinality2query_count){
		print HISTOGRAM "$mismatch_count\t",$mismatch_cardinality2query_count{$mismatch_count}/$num_queries,"\n";
	}
	close(HISTOGRAM);
}

if(defined $html_output){
	print <<END;
<html>
<head><title>Pokay alignments</title></head>
<body>
<h1>Pokay alignments</h1>
<pre>
END
}

for my $subject_name (sort keys %sequence_fasta_offsets){
	next if exists $exclude{$subject_name};
	my $num_mismatch_hits = 0;
	my $num_no_hits = 0;
	my $text = "";
	for my $query_name (sort keys %query_lengths){
		if(exists $mismatch_alignments{$subject_name} and exists $mismatch_alignments{$subject_name}->{$query_name}){
			if(defined $html_output and $mismatch_alignments{$subject_name}->{$query_name} =~ /^http/){
				$text .= "Alignment against $query_name with <a href=\"". $mismatch_alignments{$subject_name}->{$query_name}."\">".
                                         $mismatch_alignments{$subject_name}->{$query_name}."</a>\n";
			}
			else{
				$text .= "Alignment against $query_name with ". $mismatch_alignments{$subject_name}->{$query_name}."\n";
			}
			$num_mismatch_hits++;
		}
		elsif(not $aa_queries_detected and (not exists $perfect_match_alignment{$subject_name} or not exists $perfect_match_alignment{$subject_name}->{$query_name})){
			$text .= "NO MATCH FOUND for $query_name (length $query_lengths{$query_name})\n";
			$num_no_hits++;
		}
	}
	if($num_mismatch_hits or $num_no_hits){
		print "===$subject_name===\n";
		if($num_no_hits or exists $extended_alignment{$subject_name}){
			# Print information about template length and the location of stretches of N's that might be relevant to doing triage of misses
			print "Template length ", length(&template_sequence($subject_name)), ", N stretches [",
                              join("],[", map {$_->[0].",".$_->[1]} @{$template_sequence_N_regions{$subject_name}}),"]\n\n";
		}
		print $text;
	}
}
if(defined $html_output){
	print "\n</pre>\n</body>\n</html>\n";
}

sub valid_iupac_substitution{
	my ($qry, $sbjt, $is_aa) = @_;
	
	if(length($qry) == 0 and length($sbjt)){
		return 1;
	}

	# ambiguity code regexes
	my %subs = (
		A => "RWMDHV",
		C => "YSMBHV",
		G => "RSKBDV",
		T => "YWKBDH",
		R => "AG",
		Y => "CT",
		S => "CG",
		W => "AT",
		K => "GT",
		M => "AC",
		B => "CGT",
		D => "AGT",
		H => "ACT",
		V => "ACG",
		N => "ACGTRYSWKMBDHV"
		);
	$subs{"-"} = "-"; # support gaps

	my $regex = "";
	# If using tblastn the alignment software converted the subject to AAs for us, so we will need to do our own conversion
	# of the passed in underlying DNA to really check for mismatch if the BLAST translation was X.
	if($is_aa){
		$sbjt = uc($sbjt);
		for(my $i = 0; $i+2 < length($sbjt); $i+=3){
			my $codon = substr($sbjt, $i, 3);
			if($codon =~ /[ACGT]{3}/){
				# simple unambiguous codon case, TODO handle B and Z ambig codes
				$regex .= "[".$codon2aa{$codon}."X]";
				next;
			}
			my %possible_aa_outcomes;
			for my $b1 (split //, $subs{substr($codon, 0, 1)}){
				next unless $b1 =~ /[ACGT]/;
				for my $b2 (split //, $subs{substr($codon, 1, 1)}){
					next unless $b2 =~ /[ACGT]/;
					for my $b3 (split //, $subs{substr($codon, 2, 1)}){
						next unless $b3 =~ /[ACGT]/;
						$possible_aa_outcomes{$codon2aa{$b1.$b2.$b3}}++;
					}
				}
			}
			if(not keys %possible_aa_outcomes){
				$regex .= "[A-IK-NP-TV-Z]"; # completely promiscuous matching
			}
			else{ # matching is restricted to some degree
				$regex .= "[".join("", keys %possible_aa_outcomes)."X]";
			}
		}
		return uc($qry) =~ /^$regex$/;
	}

	# Otherwise it's DNA
	for(my $i = 0; $i < length($qry); $i++){
		my $rchar = uc(substr($qry, $i, 1)); # convert to upper case
		warn "Check query FastA, a non-IUPAC nucleotide letter found was found: $rchar\n" if not exists $subs{$rchar};
		$regex .= "[$rchar".$subs{$rchar}."N]";
	}
	return uc($sbjt) =~ /^$regex$/;
}

sub template_sequence{
	my $template_name = $_[0];
        if(exists $template_sequences{$template_name}){
		return $template_sequences{$template_name};
	}
        seek($sequence_fasta_filehandle, $sequence_fasta_offsets{$template_name}, SEEK_SET); # SET = relative to begin of file
	my $old_record_separator = $/;
        $/ = "\n";
	my $seq = <$sequence_fasta_filehandle>;
	chomp $seq;
	while(length($seq) < $sequence_length{$template_name}){
		my $line = <$sequence_fasta_filehandle>;
		chomp($line);
		$seq .= $line;
	}
	$/ = $old_record_separator;
	$template_sequences{$template_name} = $seq;
	
	return $template_sequences{$template_name};
}

sub old_template_sequence{
	# If the program needs to access the sequence, replace the sentinel "1" in %template_sequences with the full sequence
	# from the samtools fasta index.
	my $template_name = $_[0];
	if($template_sequences{$template_name} !~ /^[ACGTNSWKMRYBDHV]/){
		my $old_record_separator = $/;
		$/ = "\n";
		open(FAIDX, "samtools faidx $db_file '$template_name' |")
			or die "Cannot run samtools faidx: $!\n";
		$template_sequences{$template_name} = "";
		<FAIDX>; # header
		while(<FAIDX>){
			chomp;
			$template_sequences{$template_name} .= $_;
		}
		close(FAIDX);

 		# Let's record as linear coordinate tuples where stretches of N's are located in the genome, so these
 		# can be reported to help the user determine if a lack of BLAST match is due to change in the sequence,
 		# or that it's N's where the primer/probe would normally bind.
		my $template_sequence = $template_sequences{$template_name};
		while($template_sequence =~ /N{$min_interferring_N_stretch,}/go){
 	 		$template_sequence_N_regions{$template_name} //= []; # eschewing auto-vivification of the array
 	 		push @{$template_sequence_N_regions{$template_name}}, [pos($template_sequence), pos($template_sequence)+length($&)-1];
 		}
		$/ = $old_record_separator;
	}
	return $template_sequences{$_[0]};
}
